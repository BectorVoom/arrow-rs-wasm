#!/usr/bin/env node

/**
 * Basic functionality test for the Arrow WASM module
 * Tests the core functionality without browser dependencies
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Arrow WASM Basic Functionality Test');
console.log('======================================');

async function loadWasmModule() {
    try {
        console.log('üì¶ Loading WASM module...');
        
        // First try to load from pkg directory
        const pkgPath = path.join(__dirname, 'pkg');
        if (!fs.existsSync(pkgPath)) {
            throw new Error(`pkg directory not found at ${pkgPath}`);
        }
        
        const wasmFiles = fs.readdirSync(pkgPath).filter(f => f.endsWith('.wasm'));
        console.log(`üîç Found WASM files: ${wasmFiles.join(', ')}`);
        
        const jsFiles = fs.readdirSync(pkgPath).filter(f => f.endsWith('.js') && !f.endsWith('.d.ts'));
        console.log(`üîç Found JS files: ${jsFiles.join(', ')}`);
        
        // Import the module
        const wasmModulePath = path.join(pkgPath, 'arrow_wasm.js');
        const wasmModule = await import(wasmModulePath);
        
        console.log('‚úÖ WASM module imported successfully');
        console.log(`üìã Available exports: ${Object.keys(wasmModule).join(', ')}`);
        
        // Initialize the module
        await wasmModule.default();
        console.log('‚úÖ WASM module initialized successfully');
        
        return wasmModule;
        
    } catch (error) {
        console.error(`‚ùå Failed to load WASM module: ${error.message}`);
        throw error;
    }
}

async function testBasicOperations(wasmModule) {
    console.log('\nüîß Testing basic operations...');
    
    try {
        // Test version info
        if (wasmModule.getVersion) {
            const version = wasmModule.getVersion();
            console.log(`‚úÖ Version: ${version.major}.${version.minor}.${version.patch} (Arrow: ${version.arrow_version})`);
        }
        
        // Test DataType creation
        if (wasmModule.DataType) {
            const intType = wasmModule.DataType.new_int32();
            const strType = wasmModule.DataType.new_utf8();
            console.log(`‚úÖ DataTypes created: Int32 (${intType.type_id()}), UTF8 (${strType.type_id()})`);
        }
        
        // Test table creation
        if (wasmModule.tableFromJSON) {
            const testData = [
                { id: 1, name: "Alice", value: 100.5 },
                { id: 2, name: "Bob", value: 200.0 },
                { id: 3, name: "Charlie", value: 300.25 }
            ];
            
            const table = wasmModule.tableFromJSON(testData);
            console.log(`‚úÖ Table created: ${table.numRows} rows, ${table.numColumns} columns`);
            
            // Test column access
            const nameColumn = table.getColumn("name");
            console.log(`‚úÖ Column access: name column has ${nameColumn.length} values`);
            
            // Test value access
            const firstValue = nameColumn.get(0);
            console.log(`‚úÖ Value access: first name is "${firstValue}"`);
            
            // Test aggregations
            if (wasmModule.sum) {
                const valueColumn = table.getColumn("value");
                const total = wasmModule.sum(valueColumn);
                console.log(`‚úÖ Sum calculation: ${total}`);
            }
            
            if (wasmModule.count) {
                const valueColumn = table.getColumn("value");
                const count = wasmModule.count(valueColumn);
                console.log(`‚úÖ Count calculation: ${count}`);
            }
            
            // Test conversion back to array
            const arrayData = table.toArray();
            console.log(`‚úÖ Table to array: ${arrayData.length} rows`);
            
            // Clean up
            table.dispose();
            console.log('‚úÖ Memory cleanup completed');
        }
        
        return true;
        
    } catch (error) {
        console.error(`‚ùå Basic operations test failed: ${error.message}`);
        console.error(error.stack);
        return false;
    }
}

async function testArrayBuilder(wasmModule) {
    console.log('\nüèóÔ∏è  Testing ArrayBuilder...');
    
    try {
        if (wasmModule.ArrayBuilder && wasmModule.DataType) {
            const builder = new wasmModule.ArrayBuilder(wasmModule.DataType.new_int32(), 10);
            
            builder.append(42);
            builder.append(84);
            builder.appendNull();
            builder.append(126);
            
            const column = builder.finish();
            console.log(`‚úÖ ArrayBuilder: created column with ${column.length} values`);
            
            const firstVal = column.get(0);
            const isNullThird = column.isNull(2);
            console.log(`‚úÖ Values: first=${firstVal}, third is null=${isNullThird}`);
            
            return true;
        } else {
            console.log('‚ö†Ô∏è  ArrayBuilder not available');
            return true;
        }
        
    } catch (error) {
        console.error(`‚ùå ArrayBuilder test failed: ${error.message}`);
        return false;
    }
}

async function main() {
    try {
        const wasmModule = await loadWasmModule();
        
        const basicOpsResult = await testBasicOperations(wasmModule);
        const arrayBuilderResult = await testArrayBuilder(wasmModule);
        
        console.log('\nüìä Test Summary:');
        console.log(`‚úÖ Module Loading: Success`);
        console.log(`${basicOpsResult ? '‚úÖ' : '‚ùå'} Basic Operations: ${basicOpsResult ? 'Success' : 'Failed'}`);
        console.log(`${arrayBuilderResult ? '‚úÖ' : '‚ùå'} ArrayBuilder: ${arrayBuilderResult ? 'Success' : 'Failed'}`);
        
        const allPassed = basicOpsResult && arrayBuilderResult;
        
        if (allPassed) {
            console.log('\nüéâ All tests passed! The WASM module is working correctly.');
            process.exit(0);
        } else {
            console.log('\n‚ùå Some tests failed.');
            process.exit(1);
        }
        
    } catch (error) {
        console.error('\nüí• Test suite failed:', error.message);
        process.exit(1);
    }
}

main().catch(console.error);